{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zRuO9OcVNkDr"
      },
      "outputs": [],
      "source": [
        "# Importing the required library\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining inputs and expected output (XOR truth table)\n",
        "X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]).T  # 2x4 matrix, each column is a training example\n",
        "d = np.array([0, 1, 1, 0])  # Expected output for XOR"
      ],
      "metadata": {
        "id": "pwU4UWOWNoCm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def initialize_network_parameters():\n",
        "    # Network parameters\n",
        "    inputSize = 2      # Number of input neurons (x1, x2)\n",
        "    hiddenSize = 2     # Number of hidden neurons\n",
        "    outputSize = 1     # Number of output neurons\n",
        "    lr = 0.01           # Learning rate\n",
        "    epochs = 1000000    # Number of training epochs\n",
        "\n",
        "    # Initialize weights and biases randomly within the range [-1, 1]\n",
        "    w1 = np.random.rand(hiddenSize, inputSize) * 2 - 1  # Weights from input to hidden layer\n",
        "    b1 = np.random.rand(hiddenSize, 1) * 2 - 1          # Bias for hidden layer\n",
        "    w2 = np.random.rand(outputSize, hiddenSize) * 2 - 1 # Weights from hidden to output layer\n",
        "    b2 = np.random.rand(outputSize, 1) * 2 - 1          # Bias for output layer\n",
        "\n",
        "    return w1, b1, w2, b2, lr, epochs\n"
      ],
      "metadata": {
        "id": "VQ0qN63UNqJv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get initialized parameters\n",
        "w1, b1, w2, b2, lr, epochs = initialize_network_parameters()\n",
        "\n",
        "# Training the network using backpropagation\n",
        "error_list = []\n",
        "for epoch in range(epochs):\n",
        "    # Forward pass\n",
        "    z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "    a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "    z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "    a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "    # Error calculation and backpropagation\n",
        "    error = d - a2  # Difference between expected and actual output\n",
        "    da2 = error * (a2 * (1 - a2))  # Derivative for output layer\n",
        "    dz2 = da2  # Gradient for output layer\n",
        "\n",
        "    # Propagate error to hidden layer\n",
        "    da1 = np.dot(w2.T, dz2)  # Gradient for hidden layer\n",
        "    dz1 = da1 * (a1 * (1 - a1))  # Derivative for hidden layer\n",
        "\n",
        "    # Update weights and biases\n",
        "    w2 += lr * np.dot(dz2, a1.T)  # Update weights from hidden to output layer\n",
        "    b2 += lr * np.sum(dz2, axis=1, keepdims=True)  # Update bias for output layer\n",
        "\n",
        "    w1 += lr * np.dot(dz1, X.T)  # Update weights from input to hidden layer\n",
        "    b1 += lr * np.sum(dz1, axis=1, keepdims=True)  # Update bias for hidden layer\n",
        "    if (epoch+1)%10000 == 0:\n",
        "        print(\"Epoch: %d, Average error: %0.05f\"%(epoch, np.average(abs(error))))\n",
        "        error_list.append(np.average(abs(error)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9R2rv9oBNsFX",
        "outputId": "a2271824-1088-4d49-f981-472549afb987"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 9999, Average error: 0.07050\n",
            "Epoch: 19999, Average error: 0.03327\n",
            "Epoch: 29999, Average error: 0.02460\n",
            "Epoch: 39999, Average error: 0.02033\n",
            "Epoch: 49999, Average error: 0.01768\n",
            "Epoch: 59999, Average error: 0.01584\n",
            "Epoch: 69999, Average error: 0.01447\n",
            "Epoch: 79999, Average error: 0.01339\n",
            "Epoch: 89999, Average error: 0.01252\n",
            "Epoch: 99999, Average error: 0.01180\n",
            "Epoch: 109999, Average error: 0.01119\n",
            "Epoch: 119999, Average error: 0.01066\n",
            "Epoch: 129999, Average error: 0.01020\n",
            "Epoch: 139999, Average error: 0.00980\n",
            "Epoch: 149999, Average error: 0.00943\n",
            "Epoch: 159999, Average error: 0.00911\n",
            "Epoch: 169999, Average error: 0.00882\n",
            "Epoch: 179999, Average error: 0.00855\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing the trained network\n",
        "z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "# Print results\n",
        "print('Final output after training:', a2)\n",
        "print('Ground truth', d)\n",
        "print('Error after training:', error)\n",
        "print('Average error: %0.05f'%np.average(abs(error)))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dLhfoARdNv9K",
        "outputId": "e7c6aef2-27d8-49ad-ec7d-2d6f8dd6444e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final output after training: [[0.00786945 0.99104453 0.99104467 0.00841046]]\n",
            "Ground truth [0 1 1 0]\n",
            "Error after training: [[-0.00786947  0.0089555   0.00895536 -0.00841048]]\n",
            "Average error: 0.00855\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot error\n",
        "plt.plot(error_list)\n",
        "plt.title('Error')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Error')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "mplqHXuRN2q4",
        "outputId": "07769ace-1017-42be-fe89-b26dd19ece36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Write your code here\n",
        "X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]).T\n",
        "d = np.array([0, 0, 0, 1])\n",
        "\n",
        "w1, b1, w2, b2, lr, epochs = initialize_network_parameters()\n",
        "\n",
        "error_list = []\n",
        "for epoch in range(epochs):\n",
        "    # Forward pass\n",
        "    z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "    a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "    z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "    a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "    # Error calculation and backpropagation\n",
        "    error = d - a2  # Difference between expected and actual output\n",
        "    da2 = error * (a2 * (1 - a2))  # Derivative for output layer\n",
        "    dz2 = da2  # Gradient for output layer\n",
        "\n",
        "    # Propagate error to hidden layer\n",
        "    da1 = np.dot(w2.T, dz2)  # Gradient for hidden layer\n",
        "    dz1 = da1 * (a1 * (1 - a1))  # Derivative for hidden layer\n",
        "\n",
        "    # Update weights and biases\n",
        "    w2 += lr * np.dot(dz2, a1.T)  # Update weights from hidden to output layer\n",
        "    b2 += lr * np.sum(dz2, axis=1, keepdims=True)  # Update bias for output layer\n",
        "\n",
        "    w1 += lr * np.dot(dz1, X.T)  # Update weights from input to hidden layer\n",
        "    b1 += lr * np.sum(dz1, axis=1, keepdims=True)  # Update bias for hidden layer\n",
        "    if (epoch+1)%10000 == 0:\n",
        "        print(\"Epoch: %d, Average error: %0.05f\"%(epoch, np.average(abs(error))))\n",
        "        error_list.append(np.average(abs(error)))\n",
        "\n",
        "# Testing the trained network\n",
        "z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "# Print results\n",
        "print('Final output after training:', a2)\n",
        "print('Ground truth', d)\n",
        "print('Error after training:', error)\n",
        "print('Average error: %0.05f'%np.average(abs(error)))\n",
        "\n",
        "# Plot error\n",
        "plt.plot(error_list)\n",
        "plt.title('Error')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Error')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 874
        },
        "id": "dFqpOjxdN5Md",
        "outputId": "0e865157-6d3c-4dd9-f012-408770a02ad4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 9999, Average error: 0.02605\n",
            "Epoch: 19999, Average error: 0.01658\n",
            "Epoch: 29999, Average error: 0.01295\n",
            "Epoch: 39999, Average error: 0.01093\n",
            "Epoch: 49999, Average error: 0.00961\n",
            "Epoch: 59999, Average error: 0.00865\n",
            "Epoch: 69999, Average error: 0.00793\n",
            "Epoch: 79999, Average error: 0.00736\n",
            "Epoch: 89999, Average error: 0.00689\n",
            "Epoch: 99999, Average error: 0.00650\n",
            "Epoch: 109999, Average error: 0.00616\n",
            "Epoch: 119999, Average error: 0.00587\n",
            "Epoch: 129999, Average error: 0.00562\n",
            "Epoch: 139999, Average error: 0.00540\n",
            "Epoch: 149999, Average error: 0.00520\n",
            "Epoch: 159999, Average error: 0.00502\n",
            "Epoch: 169999, Average error: 0.00485\n",
            "Epoch: 179999, Average error: 0.00470\n",
            "Final output after training: [[2.14070669e-04 4.91015001e-03 4.86422850e-03 9.91176036e-01]]\n",
            "Ground truth [0 0 0 1]\n",
            "Error after training: [[-0.00021407 -0.00491017 -0.00486424  0.00882399]]\n",
            "Average error: 0.00470\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Write your code here\n",
        "X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]).T\n",
        "d = np.array([0, 1, 1, 0])\n",
        "\n",
        "w1, b1, w2, b2, lr, epochs = initialize_network_parameters()\n",
        "\n",
        "error_list = []\n",
        "for epoch in range(epochs):\n",
        "    # Forward pass\n",
        "    z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "    a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "    z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "    a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "    # Error calculation and backpropagation\n",
        "    error = d - a2  # Difference between expected and actual output\n",
        "    da2 = error * (a2 * (1 - a2))  # Derivative for output layer\n",
        "    dz2 = da2  # Gradient for output layer\n",
        "\n",
        "    # Propagate error to hidden layer\n",
        "    da1 = np.dot(w2.T, dz2)  # Gradient for hidden layer\n",
        "    dz1 = da1 * (a1 * (1 - a1))  # Derivative for hidden layer\n",
        "\n",
        "    # Update weights and biases\n",
        "    w2 += lr * np.dot(dz2, a1.T)  # Update weights from hidden to output layer\n",
        "    b2 += lr * np.sum(dz2, axis=1, keepdims=True)  # Update bias for output layer\n",
        "\n",
        "    w1 += lr * np.dot(dz1, X.T)  # Update weights from input to hidden layer\n",
        "    b1 += lr * np.sum(dz1, axis=1, keepdims=True)  # Update bias for hidden layer\n",
        "    if (epoch+1)%10000 == 0:\n",
        "        print(\"Epoch: %d, Average error: %0.05f\"%(epoch, np.average(abs(error))))\n",
        "        error_list.append(np.average(abs(error)))\n",
        "\n",
        "# Testing the trained network\n",
        "z1 = np.dot(w1, X) + b1  # Weighted sum for hidden layer\n",
        "a1 = 1 / (1 + np.exp(-z1))  # Sigmoid activation for hidden layer\n",
        "\n",
        "z2 = np.dot(w2, a1) + b2  # Weighted sum for output layer\n",
        "a2 = 1 / (1 + np.exp(-z2))  # Sigmoid activation for output layer\n",
        "\n",
        "# Print results\n",
        "print('Final output after training:', a2)\n",
        "print('Ground truth', d)\n",
        "print('Error after training:', error)\n",
        "print('Average error: %0.05f'%np.average(abs(error)))\n",
        "\n",
        "# Plot error\n",
        "plt.plot(error_list)\n",
        "plt.title('Error')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Error')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Zi13s0rXOB44",
        "outputId": "27af0f0b-f3f1-4b7f-d57f-fe6ce0ea8af7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 9999, Average error: 0.49954\n",
            "Epoch: 19999, Average error: 0.49707\n",
            "Epoch: 29999, Average error: 0.46523\n",
            "Epoch: 39999, Average error: 0.36682\n",
            "Epoch: 49999, Average error: 0.32073\n",
            "Epoch: 59999, Average error: 0.30185\n",
            "Epoch: 69999, Average error: 0.29182\n",
            "Epoch: 79999, Average error: 0.28557\n",
            "Epoch: 89999, Average error: 0.28125\n",
            "Epoch: 99999, Average error: 0.27808\n",
            "Epoch: 109999, Average error: 0.27563\n",
            "Epoch: 119999, Average error: 0.27368\n",
            "Epoch: 129999, Average error: 0.27208\n",
            "Epoch: 139999, Average error: 0.27074\n",
            "Epoch: 149999, Average error: 0.26960\n",
            "Epoch: 159999, Average error: 0.26861\n",
            "Epoch: 169999, Average error: 0.26775\n",
            "Epoch: 179999, Average error: 0.26698\n",
            "Epoch: 189999, Average error: 0.26630\n",
            "Epoch: 199999, Average error: 0.26569\n",
            "Epoch: 209999, Average error: 0.26514\n",
            "Epoch: 219999, Average error: 0.26464\n",
            "Epoch: 229999, Average error: 0.26418\n",
            "Epoch: 239999, Average error: 0.26376\n",
            "Epoch: 249999, Average error: 0.26337\n",
            "Epoch: 259999, Average error: 0.26301\n",
            "Epoch: 269999, Average error: 0.26268\n",
            "Epoch: 279999, Average error: 0.26237\n",
            "Epoch: 289999, Average error: 0.26208\n",
            "Epoch: 299999, Average error: 0.26180\n",
            "Epoch: 309999, Average error: 0.26155\n",
            "Epoch: 319999, Average error: 0.26130\n",
            "Epoch: 329999, Average error: 0.26108\n",
            "Epoch: 339999, Average error: 0.26086\n",
            "Epoch: 349999, Average error: 0.26066\n",
            "Epoch: 359999, Average error: 0.26046\n",
            "Epoch: 369999, Average error: 0.26028\n",
            "Epoch: 379999, Average error: 0.26010\n",
            "Epoch: 389999, Average error: 0.25993\n",
            "Epoch: 399999, Average error: 0.25977\n",
            "Epoch: 409999, Average error: 0.25962\n",
            "Epoch: 419999, Average error: 0.25947\n",
            "Epoch: 429999, Average error: 0.25933\n",
            "Epoch: 439999, Average error: 0.25920\n",
            "Epoch: 449999, Average error: 0.25907\n",
            "Epoch: 459999, Average error: 0.25894\n",
            "Epoch: 469999, Average error: 0.25882\n",
            "Epoch: 479999, Average error: 0.25871\n",
            "Epoch: 489999, Average error: 0.25860\n",
            "Epoch: 499999, Average error: 0.25849\n",
            "Epoch: 509999, Average error: 0.25839\n",
            "Epoch: 519999, Average error: 0.25829\n",
            "Epoch: 529999, Average error: 0.25819\n",
            "Epoch: 539999, Average error: 0.25809\n",
            "Epoch: 549999, Average error: 0.25800\n",
            "Epoch: 559999, Average error: 0.25792\n",
            "Epoch: 569999, Average error: 0.25783\n",
            "Epoch: 579999, Average error: 0.25775\n",
            "Epoch: 589999, Average error: 0.25767\n",
            "Epoch: 599999, Average error: 0.25759\n",
            "Epoch: 609999, Average error: 0.25751\n",
            "Epoch: 619999, Average error: 0.25744\n",
            "Epoch: 629999, Average error: 0.25737\n",
            "Epoch: 639999, Average error: 0.25730\n",
            "Epoch: 649999, Average error: 0.25723\n",
            "Epoch: 659999, Average error: 0.25716\n",
            "Epoch: 669999, Average error: 0.25710\n",
            "Epoch: 679999, Average error: 0.25703\n",
            "Epoch: 689999, Average error: 0.25697\n",
            "Epoch: 699999, Average error: 0.25691\n",
            "Epoch: 709999, Average error: 0.25685\n",
            "Epoch: 719999, Average error: 0.25680\n",
            "Epoch: 729999, Average error: 0.25674\n",
            "Epoch: 739999, Average error: 0.25669\n",
            "Epoch: 749999, Average error: 0.25663\n",
            "Epoch: 759999, Average error: 0.25658\n",
            "Epoch: 769999, Average error: 0.25653\n",
            "Epoch: 779999, Average error: 0.25648\n",
            "Epoch: 789999, Average error: 0.25643\n",
            "Epoch: 799999, Average error: 0.25638\n",
            "Epoch: 809999, Average error: 0.25634\n",
            "Epoch: 819999, Average error: 0.25629\n",
            "Epoch: 829999, Average error: 0.25625\n",
            "Epoch: 839999, Average error: 0.25620\n",
            "Epoch: 849999, Average error: 0.25616\n",
            "Epoch: 859999, Average error: 0.25612\n",
            "Epoch: 869999, Average error: 0.25608\n",
            "Epoch: 879999, Average error: 0.25603\n",
            "Epoch: 889999, Average error: 0.25599\n",
            "Epoch: 899999, Average error: 0.25596\n",
            "Epoch: 909999, Average error: 0.25592\n",
            "Epoch: 919999, Average error: 0.25588\n",
            "Epoch: 929999, Average error: 0.25584\n",
            "Epoch: 939999, Average error: 0.25581\n",
            "Epoch: 949999, Average error: 0.25577\n",
            "Epoch: 959999, Average error: 0.25573\n",
            "Epoch: 969999, Average error: 0.25570\n",
            "Epoch: 979999, Average error: 0.25567\n",
            "Epoch: 989999, Average error: 0.25563\n",
            "Epoch: 999999, Average error: 0.25560\n",
            "Final output after training: [[0.0108667  0.49975864 0.98896625 0.50025736]]\n",
            "Ground truth [0 1 1 0]\n",
            "Error after training: [[-0.0108667   0.50024137  0.01103375 -0.50025736]]\n",
            "Average error: 0.25560\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
